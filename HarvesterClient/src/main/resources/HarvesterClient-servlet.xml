<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">
    <!-- the application context definition for the springapp DispatcherServlet -->

    <!-- exception handling -->
    <bean id="ehandler" class="harvester.client.web.ErrorController" />

     <!-- Velocity stuff -->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basename" value="messages"/>
    </bean>
    
    <bean id="velocityConfig" class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
        <property name="resourceLoaderPath" value="/" />
    </bean>

     <bean id="viewResolver" class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
        <property name="prefix"><value>/WEB-INF/velocity/</value></property>
        <property name="suffix"><value>.vm</value></property>
        <property name="exposeSpringMacroHelpers"><value>true</value></property>
        <property name="contentType" value="text/html; charset=UTF-8" />
        <property name="toolboxConfigLocation" value="/WEB-INF/toolbox.xml"/>
    </bean>
     
     <!-- Properties stuff --> 
     <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
      	<property name="location">
      		<value>classpath:HarvesterClient.properties</value>
      	</property>
     </bean>
    
    
    
    <!-- scheduler stuff -->
    
    <bean id="schedulerclient" class="harvester.client.schedule.SchedulerClient">
        <property name="wsurl" value="${wsurl}" />
        <property name="harvesterurl" value="${harvesterurl}" />
    </bean>
    
    <!-- Queue stuff -->
    <bean id="harvestQueue" class="harvester.client.harvest.HarvestQueue" >
        <property name="harvesterurl" value="${harvesterurl}" />
    </bean>
    
    <!-- session stuff -->
    
    <bean id="sessionconnectionhandler" class="harvester.client.connconfig.SessionConnectionHandler" scope="session">
        <aop:scoped-proxy/>        
     </bean>
    <bean id="sessionprofilehandler" class="harvester.client.profileconfig.SessionProfileHandler" scope="session">
        <aop:scoped-proxy/>        
     </bean>
    
    <bean id="profilesession" class="harvester.client.profileconfig.ProfileSession" scope="request">
        <aop:scoped-proxy/>
        <property name="sessionprofilehandler" ref="sessionprofilehandler" />
        <property name="daofactory" ref="DAOFactoryImpl" />
    </bean>
    
    <!-- input stage related stuff -->
    
    <!-- OAI Stage -->
    <bean id="OAIOptionProcessor" class="harvester.client.connconfig.actions.OAIOptionProcessor" >
        <property name="setspecid" value="56" />
    </bean>
    <bean id="Z3950OptionProcessor" class="harvester.client.connconfig.actions.Z3950OptionProcessor" />
    
    <!-- this class holds information on the specific settings for each input stage -->
    <bean id="inputpluginconfigurer" class="harvester.client.connconfig.InputPluginConfigurer">
        <!-- these are the inputs that should be shown on step 2 instead of step 3 of the connection settings wizard -->
        <property name="initialparameters">
            <map>
                 <entry key="harvester.processor.steps.HarvesterThroughWS">
                        <list>
                            <value>6</value>
                            <value>12</value>
                        </list>
                 </entry>
            </map>
        </property>
        <!-- link each harvest step with the client side code for it, executed between steps 2 and 3. -->
        <property name="processors">
            <map>
                 <entry key="harvester.processor.steps.HarvesterThroughWS" value-ref="OAIOptionProcessor" />
                 <entry key="harvester.processor.steps.HarvestMarcXML" value-ref="Z3950OptionProcessor" />
            </map>
        </property>
        <property name="daofactory" ref="DAOFactoryImpl" /> <!-- it might need database access -->
    </bean>
    
    
    <!-- ouput stage stuff -->
    
    <!--<bean id="ArrowLoaderActions" class="harvester.client.connconfig.actions.ArrowLoaderActions">
        <property name="solrurl" value="${solrurl}" />
        <property name="arrowurl" value="${arrowurl}" />        
    </bean>
    
    <bean id="PeopleLoaderActions" class="harvester.client.connconfig.actions.PeopleLoaderActions">   
		<property name="identityurl" value="${identityurl}" />
    </bean>
    
    -->
    
    <bean id="ExampleLoaderActions" class="harvester.client.connconfig.actions.ExampleLoaderActions">   
      <!-- Put any properties needed here -->
    </bean>
    
    <!-- service layer stuff -->
    <bean id="collectionService" class="harvester.client.service.CollectionService">
        <property name="daofactory" ref="DAOFactoryImpl" />        
        <property name="stepactions">
            <map>
                <!-- This ties the code in a loader action class to a loader step defined in the database.
                     the key is the stepid of the step in the database -->
                 <entry key="63" value-ref="ExampleLoaderActions" />
                 <!-- <entry key="57" value-ref="ArrowLoaderActions" />
                      <entry key="61" value-ref="PeopleLoaderActions" /> 
                 -->
            </map>
        </property> 
    </bean>
    
    <!-- profile configuration stuff -->
    
    <bean id="ConvertValueCustomized" class="harvester.client.profileconfig.customized.ConvertValue">
        <!-- these tie the fields to there representation in the database -->
        <property name="conversionid" value="36" />
        <property name="mappingfileid" value="50" />
        <property name="fieldnameid" value="32" />
    </bean>
    
    <bean id="XSLTTranslatorCustomized" class="harvester.client.profileconfig.customized.XSLTTranslator">
        <property name="fileidid" value="55" />
    </bean>
    <bean id="AddFieldCustomized" class="harvester.client.profileconfig.customized.AddField2" />
    
    <!-- Since steps can be configured with a custom view and a custom code behind. This section specifies this -->
    <bean id="steppluginconfigurer" class="harvester.client.profileconfig.StepPluginConfigurer" >
        <property name="alternateviews">
            <map>
                <entry key="harvester.processor.steps.ConvertValue"><value>customizedsteps/ConvertValue</value></entry>
                <entry key="harvester.processor.steps.AddField2"><value>customizedsteps/AddField</value></entry>
                <entry key="harvester.processor.steps.XSLTTranslator"><value>customizedsteps/XSLTTranslator</value></entry>
            </map>
        </property>
        <property name="customizedSteps">
            <map>
                 <entry key="harvester.processor.steps.ConvertValue" value-ref="ConvertValueCustomized" />
                 <entry key="harvester.processor.steps.AddField2" value-ref="AddFieldCustomized" />
                 <entry key="harvester.processor.steps.XSLTTranslator" value-ref="XSLTTranslatorCustomized" />
            </map>
        </property>
        <property name="daofactory" ref="DAOFactoryImpl" /> <!-- it might need database access -->
    </bean> 
</beans>
